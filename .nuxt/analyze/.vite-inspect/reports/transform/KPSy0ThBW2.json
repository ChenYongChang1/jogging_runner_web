{
  "resolvedId": "/Users/chenyongchang/lib/outsource/hz/ultra_jogging_web/node_modules/.pnpm/element-plus@2.9.5_vue@3.5.13_typescript@5.8.2_/node_modules/element-plus/es/components/input/src/input2.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { defineComponent, useAttrs, useSlots, computed, shallowRef, ref, watch, nextTick, onMounted, toRef, openBlock, createElementBlock, normalizeClass, unref, normalizeStyle, createCommentVNode, Fragment, renderSlot, createElementVNode, createBlock, withCtx, resolveDynamicComponent, mergeProps, withModifiers, createVNode, toDisplayString } from 'vue';\nimport { useResizeObserver, isClient } from '@vueuse/core';\nimport { isNil } from 'lodash-unified';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { View, Hide, CircleClose } from '@element-plus/icons-vue';\nimport { calcTextareaHeight } from './utils.mjs';\nimport { inputProps, inputEmits } from './input.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useAttrs as useAttrs$1 } from '../../../hooks/use-attrs/index.mjs';\nimport { useFormItem, useFormItemInputId } from '../../form/src/hooks/use-form-item.mjs';\nimport { useFormSize, useFormDisabled } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { useFocusController } from '../../../hooks/use-focus-controller/index.mjs';\nimport { ValidateComponentsMap } from '../../../utils/vue/icon.mjs';\nimport { useComposition } from '../../../hooks/use-composition/index.mjs';\nimport { useCursor } from '../../../hooks/use-cursor/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { NOOP, isObject } from '@vue/shared';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\n\nconst __default__ = defineComponent({\n  name: \"ElInput\",\n  inheritAttrs: false\n});\nconst _sfc_main = /* @__PURE__ */ defineComponent({\n  ...__default__,\n  props: inputProps,\n  emits: inputEmits,\n  setup(__props, { expose, emit }) {\n    const props = __props;\n    const rawAttrs = useAttrs();\n    const attrs = useAttrs$1();\n    const slots = useSlots();\n    const containerKls = computed(() => [\n      props.type === \"textarea\" ? nsTextarea.b() : nsInput.b(),\n      nsInput.m(inputSize.value),\n      nsInput.is(\"disabled\", inputDisabled.value),\n      nsInput.is(\"exceed\", inputExceed.value),\n      {\n        [nsInput.b(\"group\")]: slots.prepend || slots.append,\n        [nsInput.m(\"prefix\")]: slots.prefix || props.prefixIcon,\n        [nsInput.m(\"suffix\")]: slots.suffix || props.suffixIcon || props.clearable || props.showPassword,\n        [nsInput.bm(\"suffix\", \"password-clear\")]: showClear.value && showPwdVisible.value,\n        [nsInput.b(\"hidden\")]: props.type === \"hidden\"\n      },\n      rawAttrs.class\n    ]);\n    const wrapperKls = computed(() => [\n      nsInput.e(\"wrapper\"),\n      nsInput.is(\"focus\", isFocused.value)\n    ]);\n    const { form: elForm, formItem: elFormItem } = useFormItem();\n    const { inputId } = useFormItemInputId(props, {\n      formItemContext: elFormItem\n    });\n    const inputSize = useFormSize();\n    const inputDisabled = useFormDisabled();\n    const nsInput = useNamespace(\"input\");\n    const nsTextarea = useNamespace(\"textarea\");\n    const input = shallowRef();\n    const textarea = shallowRef();\n    const hovering = ref(false);\n    const passwordVisible = ref(false);\n    const countStyle = ref();\n    const textareaCalcStyle = shallowRef(props.inputStyle);\n    const _ref = computed(() => input.value || textarea.value);\n    const { wrapperRef, isFocused, handleFocus, handleBlur } = useFocusController(_ref, {\n      beforeFocus() {\n        return inputDisabled.value;\n      },\n      afterBlur() {\n        var _a;\n        if (props.validateEvent) {\n          (_a = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"blur\").catch((err) => debugWarn(err));\n        }\n      }\n    });\n    const needStatusIcon = computed(() => {\n      var _a;\n      return (_a = elForm == null ? void 0 : elForm.statusIcon) != null ? _a : false;\n    });\n    const validateState = computed(() => (elFormItem == null ? void 0 : elFormItem.validateState) || \"\");\n    const validateIcon = computed(() => validateState.value && ValidateComponentsMap[validateState.value]);\n    const passwordIcon = computed(() => passwordVisible.value ? View : Hide);\n    const containerStyle = computed(() => [\n      rawAttrs.style\n    ]);\n    const textareaStyle = computed(() => [\n      props.inputStyle,\n      textareaCalcStyle.value,\n      { resize: props.resize }\n    ]);\n    const nativeInputValue = computed(() => isNil(props.modelValue) ? \"\" : String(props.modelValue));\n    const showClear = computed(() => props.clearable && !inputDisabled.value && !props.readonly && !!nativeInputValue.value && (isFocused.value || hovering.value));\n    const showPwdVisible = computed(() => props.showPassword && !inputDisabled.value && !!nativeInputValue.value && (!!nativeInputValue.value || isFocused.value));\n    const isWordLimitVisible = computed(() => props.showWordLimit && !!props.maxlength && (props.type === \"text\" || props.type === \"textarea\") && !inputDisabled.value && !props.readonly && !props.showPassword);\n    const textLength = computed(() => nativeInputValue.value.length);\n    const inputExceed = computed(() => !!isWordLimitVisible.value && textLength.value > Number(props.maxlength));\n    const suffixVisible = computed(() => !!slots.suffix || !!props.suffixIcon || showClear.value || props.showPassword || isWordLimitVisible.value || !!validateState.value && needStatusIcon.value);\n    const [recordCursor, setCursor] = useCursor(input);\n    useResizeObserver(textarea, (entries) => {\n      onceInitSizeTextarea();\n      if (!isWordLimitVisible.value || props.resize !== \"both\")\n        return;\n      const entry = entries[0];\n      const { width } = entry.contentRect;\n      countStyle.value = {\n        right: `calc(100% - ${width + 15 + 6}px)`\n      };\n    });\n    const resizeTextarea = () => {\n      const { type, autosize } = props;\n      if (!isClient || type !== \"textarea\" || !textarea.value)\n        return;\n      if (autosize) {\n        const minRows = isObject(autosize) ? autosize.minRows : void 0;\n        const maxRows = isObject(autosize) ? autosize.maxRows : void 0;\n        const textareaStyle2 = calcTextareaHeight(textarea.value, minRows, maxRows);\n        textareaCalcStyle.value = {\n          overflowY: \"hidden\",\n          ...textareaStyle2\n        };\n        nextTick(() => {\n          textarea.value.offsetHeight;\n          textareaCalcStyle.value = textareaStyle2;\n        });\n      } else {\n        textareaCalcStyle.value = {\n          minHeight: calcTextareaHeight(textarea.value).minHeight\n        };\n      }\n    };\n    const createOnceInitResize = (resizeTextarea2) => {\n      let isInit = false;\n      return () => {\n        var _a;\n        if (isInit || !props.autosize)\n          return;\n        const isElHidden = ((_a = textarea.value) == null ? void 0 : _a.offsetParent) === null;\n        if (!isElHidden) {\n          resizeTextarea2();\n          isInit = true;\n        }\n      };\n    };\n    const onceInitSizeTextarea = createOnceInitResize(resizeTextarea);\n    const setNativeInputValue = () => {\n      const input2 = _ref.value;\n      const formatterValue = props.formatter ? props.formatter(nativeInputValue.value) : nativeInputValue.value;\n      if (!input2 || input2.value === formatterValue)\n        return;\n      input2.value = formatterValue;\n    };\n    const handleInput = async (event) => {\n      recordCursor();\n      let { value } = event.target;\n      if (props.formatter) {\n        value = props.parser ? props.parser(value) : value;\n      }\n      if (isComposing.value)\n        return;\n      if (value === nativeInputValue.value) {\n        setNativeInputValue();\n        return;\n      }\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(\"input\", value);\n      await nextTick();\n      setNativeInputValue();\n      setCursor();\n    };\n    const handleChange = (event) => {\n      emit(\"change\", event.target.value);\n    };\n    const {\n      isComposing,\n      handleCompositionStart,\n      handleCompositionUpdate,\n      handleCompositionEnd\n    } = useComposition({ emit, afterComposition: handleInput });\n    const handlePasswordVisible = () => {\n      recordCursor();\n      passwordVisible.value = !passwordVisible.value;\n      setTimeout(setCursor);\n    };\n    const focus = () => {\n      var _a;\n      return (_a = _ref.value) == null ? void 0 : _a.focus();\n    };\n    const blur = () => {\n      var _a;\n      return (_a = _ref.value) == null ? void 0 : _a.blur();\n    };\n    const handleMouseLeave = (evt) => {\n      hovering.value = false;\n      emit(\"mouseleave\", evt);\n    };\n    const handleMouseEnter = (evt) => {\n      hovering.value = true;\n      emit(\"mouseenter\", evt);\n    };\n    const handleKeydown = (evt) => {\n      emit(\"keydown\", evt);\n    };\n    const select = () => {\n      var _a;\n      (_a = _ref.value) == null ? void 0 : _a.select();\n    };\n    const clear = () => {\n      emit(UPDATE_MODEL_EVENT, \"\");\n      emit(\"change\", \"\");\n      emit(\"clear\");\n      emit(\"input\", \"\");\n    };\n    watch(() => props.modelValue, () => {\n      var _a;\n      nextTick(() => resizeTextarea());\n      if (props.validateEvent) {\n        (_a = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\").catch((err) => debugWarn(err));\n      }\n    });\n    watch(nativeInputValue, () => setNativeInputValue());\n    watch(() => props.type, async () => {\n      await nextTick();\n      setNativeInputValue();\n      resizeTextarea();\n    });\n    onMounted(() => {\n      if (!props.formatter && props.parser) {\n        debugWarn(\"ElInput\", \"If you set the parser, you also need to set the formatter.\");\n      }\n      setNativeInputValue();\n      nextTick(resizeTextarea);\n    });\n    expose({\n      input,\n      textarea,\n      ref: _ref,\n      textareaStyle,\n      autosize: toRef(props, \"autosize\"),\n      isComposing,\n      focus,\n      blur,\n      select,\n      clear,\n      resizeTextarea\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass([\n          unref(containerKls),\n          {\n            [unref(nsInput).bm(\"group\", \"append\")]: _ctx.$slots.append,\n            [unref(nsInput).bm(\"group\", \"prepend\")]: _ctx.$slots.prepend\n          }\n        ]),\n        style: normalizeStyle(unref(containerStyle)),\n        onMouseenter: handleMouseEnter,\n        onMouseleave: handleMouseLeave\n      }, [\n        createCommentVNode(\" input \"),\n        _ctx.type !== \"textarea\" ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [\n          createCommentVNode(\" prepend slot \"),\n          _ctx.$slots.prepend ? (openBlock(), createElementBlock(\"div\", {\n            key: 0,\n            class: normalizeClass(unref(nsInput).be(\"group\", \"prepend\"))\n          }, [\n            renderSlot(_ctx.$slots, \"prepend\")\n          ], 2)) : createCommentVNode(\"v-if\", true),\n          createElementVNode(\"div\", {\n            ref_key: \"wrapperRef\",\n            ref: wrapperRef,\n            class: normalizeClass(unref(wrapperKls))\n          }, [\n            createCommentVNode(\" prefix slot \"),\n            _ctx.$slots.prefix || _ctx.prefixIcon ? (openBlock(), createElementBlock(\"span\", {\n              key: 0,\n              class: normalizeClass(unref(nsInput).e(\"prefix\"))\n            }, [\n              createElementVNode(\"span\", {\n                class: normalizeClass(unref(nsInput).e(\"prefix-inner\"))\n              }, [\n                renderSlot(_ctx.$slots, \"prefix\"),\n                _ctx.prefixIcon ? (openBlock(), createBlock(unref(ElIcon), {\n                  key: 0,\n                  class: normalizeClass(unref(nsInput).e(\"icon\"))\n                }, {\n                  default: withCtx(() => [\n                    (openBlock(), createBlock(resolveDynamicComponent(_ctx.prefixIcon)))\n                  ]),\n                  _: 1\n                }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)\n              ], 2)\n            ], 2)) : createCommentVNode(\"v-if\", true),\n            createElementVNode(\"input\", mergeProps({\n              id: unref(inputId),\n              ref_key: \"input\",\n              ref: input,\n              class: unref(nsInput).e(\"inner\")\n            }, unref(attrs), {\n              minlength: _ctx.minlength,\n              maxlength: _ctx.maxlength,\n              type: _ctx.showPassword ? passwordVisible.value ? \"text\" : \"password\" : _ctx.type,\n              disabled: unref(inputDisabled),\n              readonly: _ctx.readonly,\n              autocomplete: _ctx.autocomplete,\n              tabindex: _ctx.tabindex,\n              \"aria-label\": _ctx.ariaLabel,\n              placeholder: _ctx.placeholder,\n              style: _ctx.inputStyle,\n              form: _ctx.form,\n              autofocus: _ctx.autofocus,\n              role: _ctx.containerRole,\n              onCompositionstart: unref(handleCompositionStart),\n              onCompositionupdate: unref(handleCompositionUpdate),\n              onCompositionend: unref(handleCompositionEnd),\n              onInput: handleInput,\n              onChange: handleChange,\n              onKeydown: handleKeydown\n            }), null, 16, [\"id\", \"minlength\", \"maxlength\", \"type\", \"disabled\", \"readonly\", \"autocomplete\", \"tabindex\", \"aria-label\", \"placeholder\", \"form\", \"autofocus\", \"role\", \"onCompositionstart\", \"onCompositionupdate\", \"onCompositionend\"]),\n            createCommentVNode(\" suffix slot \"),\n            unref(suffixVisible) ? (openBlock(), createElementBlock(\"span\", {\n              key: 1,\n              class: normalizeClass(unref(nsInput).e(\"suffix\"))\n            }, [\n              createElementVNode(\"span\", {\n                class: normalizeClass(unref(nsInput).e(\"suffix-inner\"))\n              }, [\n                !unref(showClear) || !unref(showPwdVisible) || !unref(isWordLimitVisible) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [\n                  renderSlot(_ctx.$slots, \"suffix\"),\n                  _ctx.suffixIcon ? (openBlock(), createBlock(unref(ElIcon), {\n                    key: 0,\n                    class: normalizeClass(unref(nsInput).e(\"icon\"))\n                  }, {\n                    default: withCtx(() => [\n                      (openBlock(), createBlock(resolveDynamicComponent(_ctx.suffixIcon)))\n                    ]),\n                    _: 1\n                  }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)\n                ], 64)) : createCommentVNode(\"v-if\", true),\n                unref(showClear) ? (openBlock(), createBlock(unref(ElIcon), {\n                  key: 1,\n                  class: normalizeClass([unref(nsInput).e(\"icon\"), unref(nsInput).e(\"clear\")]),\n                  onMousedown: withModifiers(unref(NOOP), [\"prevent\"]),\n                  onClick: clear\n                }, {\n                  default: withCtx(() => [\n                    createVNode(unref(CircleClose))\n                  ]),\n                  _: 1\n                }, 8, [\"class\", \"onMousedown\"])) : createCommentVNode(\"v-if\", true),\n                unref(showPwdVisible) ? (openBlock(), createBlock(unref(ElIcon), {\n                  key: 2,\n                  class: normalizeClass([unref(nsInput).e(\"icon\"), unref(nsInput).e(\"password\")]),\n                  onClick: handlePasswordVisible\n                }, {\n                  default: withCtx(() => [\n                    (openBlock(), createBlock(resolveDynamicComponent(unref(passwordIcon))))\n                  ]),\n                  _: 1\n                }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true),\n                unref(isWordLimitVisible) ? (openBlock(), createElementBlock(\"span\", {\n                  key: 3,\n                  class: normalizeClass(unref(nsInput).e(\"count\"))\n                }, [\n                  createElementVNode(\"span\", {\n                    class: normalizeClass(unref(nsInput).e(\"count-inner\"))\n                  }, toDisplayString(unref(textLength)) + \" / \" + toDisplayString(_ctx.maxlength), 3)\n                ], 2)) : createCommentVNode(\"v-if\", true),\n                unref(validateState) && unref(validateIcon) && unref(needStatusIcon) ? (openBlock(), createBlock(unref(ElIcon), {\n                  key: 4,\n                  class: normalizeClass([\n                    unref(nsInput).e(\"icon\"),\n                    unref(nsInput).e(\"validateIcon\"),\n                    unref(nsInput).is(\"loading\", unref(validateState) === \"validating\")\n                  ])\n                }, {\n                  default: withCtx(() => [\n                    (openBlock(), createBlock(resolveDynamicComponent(unref(validateIcon))))\n                  ]),\n                  _: 1\n                }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)\n              ], 2)\n            ], 2)) : createCommentVNode(\"v-if\", true)\n          ], 2),\n          createCommentVNode(\" append slot \"),\n          _ctx.$slots.append ? (openBlock(), createElementBlock(\"div\", {\n            key: 1,\n            class: normalizeClass(unref(nsInput).be(\"group\", \"append\"))\n          }, [\n            renderSlot(_ctx.$slots, \"append\")\n          ], 2)) : createCommentVNode(\"v-if\", true)\n        ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [\n          createCommentVNode(\" textarea \"),\n          createElementVNode(\"textarea\", mergeProps({\n            id: unref(inputId),\n            ref_key: \"textarea\",\n            ref: textarea,\n            class: [unref(nsTextarea).e(\"inner\"), unref(nsInput).is(\"focus\", unref(isFocused))]\n          }, unref(attrs), {\n            minlength: _ctx.minlength,\n            maxlength: _ctx.maxlength,\n            tabindex: _ctx.tabindex,\n            disabled: unref(inputDisabled),\n            readonly: _ctx.readonly,\n            autocomplete: _ctx.autocomplete,\n            style: unref(textareaStyle),\n            \"aria-label\": _ctx.ariaLabel,\n            placeholder: _ctx.placeholder,\n            form: _ctx.form,\n            autofocus: _ctx.autofocus,\n            rows: _ctx.rows,\n            role: _ctx.containerRole,\n            onCompositionstart: unref(handleCompositionStart),\n            onCompositionupdate: unref(handleCompositionUpdate),\n            onCompositionend: unref(handleCompositionEnd),\n            onInput: handleInput,\n            onFocus: unref(handleFocus),\n            onBlur: unref(handleBlur),\n            onChange: handleChange,\n            onKeydown: handleKeydown\n          }), null, 16, [\"id\", \"minlength\", \"maxlength\", \"tabindex\", \"disabled\", \"readonly\", \"autocomplete\", \"aria-label\", \"placeholder\", \"form\", \"autofocus\", \"rows\", \"role\", \"onCompositionstart\", \"onCompositionupdate\", \"onCompositionend\", \"onFocus\", \"onBlur\"]),\n          unref(isWordLimitVisible) ? (openBlock(), createElementBlock(\"span\", {\n            key: 0,\n            style: normalizeStyle(countStyle.value),\n            class: normalizeClass(unref(nsInput).e(\"count\"))\n          }, toDisplayString(unref(textLength)) + \" / \" + toDisplayString(_ctx.maxlength), 7)) : createCommentVNode(\"v-if\", true)\n        ], 64))\n      ], 38);\n    };\n  }\n});\nvar Input = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"__file\", \"input.vue\"]]);\n\nexport { Input as default };\n//# sourceMappingURL=input2.mjs.map\n",
      "start": 1741448034127,
      "end": 1741448034245,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1741448034245,
      "end": 1741448034245,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1741448034245,
      "end": 1741448034245,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n:resource",
      "start": 1741448034245,
      "end": 1741448034245,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n:directive",
      "start": 1741448034245,
      "end": 1741448034245,
      "order": "pre"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1741448034245,
      "end": 1741448034245,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1741448034245,
      "end": 1741448034245,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1741448034245,
      "end": 1741448034245,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1741448034245,
      "end": 1741448034245,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1741448034245,
      "end": 1741448034245,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1741448034245,
      "end": 1741448034245,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1741448034245,
      "end": 1741448034245,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1741448034245,
      "end": 1741448034245,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1741448034245,
      "end": 1741448034245,
      "order": "normal"
    },
    {
      "name": "nuxt:prehydrate-transform",
      "start": 1741448034245,
      "end": 1741448034245,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1741448034245,
      "end": 1741448034245,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1741448034245,
      "end": 1741448034245,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1741448034245,
      "end": 1741448034245,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1741448034245,
      "end": 1741448034245,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1741448034246,
      "end": 1741448034246,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1741448034246,
      "end": 1741448034246,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1741448034246,
      "end": 1741448034246,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1741448034246,
      "end": 1741448034246,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1741448034246,
      "end": 1741448034246,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1741448034246,
      "end": 1741448034246,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1741448034246,
      "end": 1741448034246,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1741448034246,
      "end": 1741448034246,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1741448034246,
      "end": 1741448034246,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1741448034246,
      "end": 1741448034246,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1741448034246,
      "end": 1741448034246,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1741448034246,
      "end": 1741448034246,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1741448034246,
      "end": 1741448034246,
      "order": "post"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1741448034246,
      "end": 1741448034246,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1741448034246,
      "end": 1741448034246,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1741448034246,
      "end": 1741448034246,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1741448034246,
      "end": 1741448034246,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1741448034246,
      "end": 1741448034246,
      "order": "normal"
    }
  ]
}
