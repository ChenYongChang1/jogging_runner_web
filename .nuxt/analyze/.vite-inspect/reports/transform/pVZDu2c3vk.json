{
  "resolvedId": "/Users/chenyongchang/lib/outsource/hz/ultra_jogging_web/node_modules/.pnpm/element-plus@2.9.5_vue@3.5.13_typescript@5.8.2_/node_modules/element-plus/es/hooks/use-focus-controller/index.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { getCurrentInstance, shallowRef, ref, watch, onMounted } from 'vue';\nimport { useEventListener } from '@vueuse/core';\nimport { isElement } from '../../utils/types.mjs';\nimport { isFunction } from '@vue/shared';\n\nfunction useFocusController(target, {\n  beforeFocus,\n  afterFocus,\n  beforeBlur,\n  afterBlur\n} = {}) {\n  const instance = getCurrentInstance();\n  const { emit } = instance;\n  const wrapperRef = shallowRef();\n  const isFocused = ref(false);\n  const handleFocus = (event) => {\n    const cancelFocus = isFunction(beforeFocus) ? beforeFocus(event) : false;\n    if (cancelFocus || isFocused.value)\n      return;\n    isFocused.value = true;\n    emit(\"focus\", event);\n    afterFocus == null ? void 0 : afterFocus();\n  };\n  const handleBlur = (event) => {\n    var _a;\n    const cancelBlur = isFunction(beforeBlur) ? beforeBlur(event) : false;\n    if (cancelBlur || event.relatedTarget && ((_a = wrapperRef.value) == null ? void 0 : _a.contains(event.relatedTarget)))\n      return;\n    isFocused.value = false;\n    emit(\"blur\", event);\n    afterBlur == null ? void 0 : afterBlur();\n  };\n  const handleClick = () => {\n    var _a, _b;\n    if (((_a = wrapperRef.value) == null ? void 0 : _a.contains(document.activeElement)) && wrapperRef.value !== document.activeElement)\n      return;\n    (_b = target.value) == null ? void 0 : _b.focus();\n  };\n  watch(wrapperRef, (el) => {\n    if (el) {\n      el.setAttribute(\"tabindex\", \"-1\");\n    }\n  });\n  useEventListener(wrapperRef, \"focus\", handleFocus, true);\n  useEventListener(wrapperRef, \"blur\", handleBlur, true);\n  useEventListener(wrapperRef, \"click\", handleClick, true);\n  if (process.env.NODE_ENV === \"test\") {\n    onMounted(() => {\n      const targetEl = isElement(target.value) ? target.value : document.querySelector(\"input,textarea\");\n      if (targetEl) {\n        useEventListener(targetEl, \"focus\", handleFocus, true);\n        useEventListener(targetEl, \"blur\", handleBlur, true);\n      }\n    });\n  }\n  return {\n    isFocused,\n    wrapperRef,\n    handleFocus,\n    handleBlur\n  };\n}\n\nexport { useFocusController };\n//# sourceMappingURL=index.mjs.map\n",
      "start": 1741448034285,
      "end": 1741448034402,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1741448034402,
      "end": 1741448034402,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1741448034402,
      "end": 1741448034402,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n:resource",
      "start": 1741448034402,
      "end": 1741448034402,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n:directive",
      "start": 1741448034402,
      "end": 1741448034402,
      "order": "pre"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1741448034402,
      "end": 1741448034402,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1741448034402,
      "end": 1741448034402,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1741448034402,
      "end": 1741448034402,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1741448034402,
      "end": 1741448034402,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1741448034402,
      "end": 1741448034402,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1741448034402,
      "end": 1741448034402,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1741448034402,
      "end": 1741448034402,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1741448034402,
      "end": 1741448034402,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1741448034402,
      "end": 1741448034402,
      "order": "normal"
    },
    {
      "name": "nuxt:prehydrate-transform",
      "start": 1741448034402,
      "end": 1741448034402,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1741448034402,
      "end": 1741448034402,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1741448034402,
      "end": 1741448034402,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { getCurrentInstance, shallowRef, ref, watch, onMounted } from \"vue\";\nimport { useEventListener } from \"@vueuse/core\";\nimport { isElement } from \"../../utils/types.mjs\";\nimport { isFunction } from \"@vue/shared\";\nfunction useFocusController(target, {\n  beforeFocus,\n  afterFocus,\n  beforeBlur,\n  afterBlur\n} = {}) {\n  const instance = getCurrentInstance();\n  const { emit } = instance;\n  const wrapperRef = shallowRef();\n  const isFocused = ref(false);\n  const handleFocus = (event) => {\n    const cancelFocus = isFunction(beforeFocus) ? beforeFocus(event) : false;\n    if (cancelFocus || isFocused.value)\n      return;\n    isFocused.value = true;\n    emit(\"focus\", event);\n    afterFocus == null ? void 0 : afterFocus();\n  };\n  const handleBlur = (event) => {\n    var _a;\n    const cancelBlur = isFunction(beforeBlur) ? beforeBlur(event) : false;\n    if (cancelBlur || event.relatedTarget && ((_a = wrapperRef.value) == null ? void 0 : _a.contains(event.relatedTarget)))\n      return;\n    isFocused.value = false;\n    emit(\"blur\", event);\n    afterBlur == null ? void 0 : afterBlur();\n  };\n  const handleClick = () => {\n    var _a, _b;\n    if (((_a = wrapperRef.value) == null ? void 0 : _a.contains(document.activeElement)) && wrapperRef.value !== document.activeElement)\n      return;\n    (_b = target.value) == null ? void 0 : _b.focus();\n  };\n  watch(wrapperRef, (el) => {\n    if (el) {\n      el.setAttribute(\"tabindex\", \"-1\");\n    }\n  });\n  useEventListener(wrapperRef, \"focus\", handleFocus, true);\n  useEventListener(wrapperRef, \"blur\", handleBlur, true);\n  useEventListener(wrapperRef, \"click\", handleClick, true);\n  if (false) {\n    onMounted(() => {\n      const targetEl = isElement(target.value) ? target.value : document.querySelector(\"input,textarea\");\n      if (targetEl) {\n        useEventListener(targetEl, \"focus\", handleFocus, true);\n        useEventListener(targetEl, \"blur\", handleBlur, true);\n      }\n    });\n  }\n  return {\n    isFocused,\n    wrapperRef,\n    handleFocus,\n    handleBlur\n  };\n}\nexport { useFocusController };\n",
      "start": 1741448034402,
      "end": 1741448034560,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1741448034560,
      "end": 1741448034560,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1741448034560,
      "end": 1741448034560,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1741448034560,
      "end": 1741448034560,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1741448034560,
      "end": 1741448034560,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1741448034560,
      "end": 1741448034560,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1741448034560,
      "end": 1741448034560,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1741448034560,
      "end": 1741448034560,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1741448034560,
      "end": 1741448034560,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1741448034560,
      "end": 1741448034560,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1741448034560,
      "end": 1741448034560,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1741448034560,
      "end": 1741448034560,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1741448034560,
      "end": 1741448034560,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1741448034560,
      "end": 1741448034560,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1741448034561,
      "end": 1741448034561,
      "order": "post"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1741448034561,
      "end": 1741448034561,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1741448034561,
      "end": 1741448034561,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1741448034561,
      "end": 1741448034561,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1741448034561,
      "end": 1741448034561,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1741448034561,
      "end": 1741448034561,
      "order": "normal"
    }
  ]
}
